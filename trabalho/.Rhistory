install.packages("rmarkdown")
install.packages("shiny")
install.packages("tidyverse", dempendecies = TRUE)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("curl")
install.packages("curl")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("openssl")
install.packages("openssl")
install.packages("tidyverse")
install.packages("devtools")
install.packages("magrittr")
install.packages("dplyr")
setwd("~/2018-2/Inferencia/trabalho")
# Trabalho inferência
citation()
# Trabalho inferência
citation()
# Exponencial
x <- seq(0, 2, l = 100)
b0 = log(1)
b0 = log(1)
b1 = -2
lambda = exp(b0 +b1*x)
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.03
y2 <- y + 0.03
censu <- data.frame(y1, y2)
censu
plot(censu$y2)
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
ll_censu
summary(ll_censu)
plot(-ll_censu)
curve(log, -11.680, -2.966)
# Verossimilhança
vero <- sum(-ll_censu)
vero
#estimando
#log-verossimilhança
ll <- function(theta, inferior, superior, x){
lambda = exp(theta[1] + theta[2]*x)
output <- -sum(log(pexp(superior, rate = lambda) - pexp(inferior, rate = lambda)))
return(output)
}
sprtinf("%0.3f", vero)
